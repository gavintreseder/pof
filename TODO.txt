# Priority

    # Annualised cost button
    # Change sensitivity graph to work for any variable and range Input
        # Task groups
    # Expected failures


    # Talk to Occa about representing probability of repeatable events


    # Task group active on interface


    # Current failure rates
    

    # Replacement costs
        # Average replacement cost (using cost model)

    # Scale costs for task group


# Illyse Tasks:
    # Time units on graphs based on units from object
    # Chang logging level for werkzeg


# Greg Changes
    # Set up one failure mode for hte most complex scenarios
        # Multiple inspection types (drones, groundline, aerial, protection trip) -> Tell the story around scenario analysis
        # Multiple condition measures (rot_ground_line, rot_pole_top)

    
    # Set up demo for the impact of changing the lower/upper intervention limits
        # Safety Factor -> First pass
        # Intervention threshold (50mm) -> second pass

    # CAT3/4 - AND State AND Condition
        # Set minimum limits for MWT from OIM
    # CAT1/2 - AND State OR Condition
    # Emergency - Failure
        Set up one demo for a triggers

Complete
    # Dash update id methods (see this from above)
        # Complete tests for each of them
    # Testing
        # Finish load test for Task, ConditionTask, ScheduledTask, Inspection
        # Write a test for different version of expected_risk_cost_df
        # Load data test can return a load error, but this isn't checked
    # Asset_model_loader
        # update rename duplicates so it also checks for duplicates in the asset model (whole list) and in the failure mdoes(no duplicates within comp)
    # Validation
        # Failure Mode / Condition -> Make tasks check the fm tasks are only triggered by conditions associated with that failure mode
    # Review task update method
    # Split set/update methods
    # Init dist not working

# 09 Sep -> Illyse Tasks

    # Distribution
        # change all use of sample method to conditional survival rate


# 08 Sep - Gav
    # Trigger active doesn't do anything
    # All task triggers acting as AND rather than or _> requires change for on_condition_replacement



    # Write get_dist methods that get the distributions for methods rather than the expected

    # Options
        # PF_interval on load
        # Replace on failure
        # Replace higher level asset
        # Timeline inside object
        # Sensitivity Analysis
        # Threading


    # Components
        # Asset Data
            # Consequence Model
            # Load data from csv file
            # Cox model


    # Critical
        # inspection interval onto interface w button
        # n failures expected for population
            # fleet data
        # asset data
            # consequence model

        # task error
            # fast degrading not found
            # init timeline has minor reset problem if it is changed. tasks intervals not changed
            Code to replicate


    # Interface
        # Loading
            # asset models
            # asset data
        # Single Timeline
        # Monte carlo
        # Fleet

# Consider adding doc tests

fm2 = FailureMode.load(data['pole']['fm']['termites'])
fm2.sim_timeline(200)
fm2.plot_timeline()
for cond in fm2.conditions.values():
    cond.pf_interval = 50
fm2.sim_timeline(200)
fm2.plot_timeline()

        # Notebooks to explain


    # Tasks
        # Tool demo
            # Answer in the paper
        
        # Technical brief - Documentation
            # 

    # Calibration
        # percent failing by age
        # Number of faiures expected last year

    # asset model
        # review data with Greg

    # asset data
        #
    
    # fleet data
        # summarise assets into population groups*

    # runner
        # load it
        # link it
        # display it
        # fleet summary

    # Standard Safety factor
    # Asset Loader
        # Load Asset Model (no tests)
        # Load Asset Data
        # Load Fleet Data
    # Calibration
        # Asset details in interface

    # Nice to have
        # Interface improvements
            # Task Schedule
        # Make layout a class
        # Inpsection interval
            # Generalise to sensitivity
        # Save models

        # Condition reset
            # condition reset not accumulating damage correclty (E.g. try reduction factor 50%)

        # Loading
            # make robust loader a base class that every other class inherits from


    # Replace on failure button

    # Add methods for'max', 'any', 'min', etc

    # Change task to trigger


Add starting condition
Load with pole failure modes


# TODO later

    # connect system impact for failure modes

    # Investigate why the change to condition made everything slower
        # Move condition to component
        # load using condition loss
        # simplify calcs

# Improvements

    # Move to celery and redis
    # Add a method when you don't want to use condition, only failure rates
    # Get 'step' condition working


# Get multiple failure modes working

    # Add functionality to reset failure modes
        # Task -> CM definitely
            # Component -> Which failure_modes reset the component

    # Add safety factor

    # Add method to replace on failure?

# Get example assets working

    # Load a pole asset

    # Load indiciative pole details

# Make the interface prettier

# Sensitivity Analysis

    # Input to change
    # Min
    # Max
    # n_steps

    # Output Graph type / axis

    #Graph
        # Fix axis


# Story

    # Failure rate for whole population
    # Failure modes
    # Failure modes with reset
    # Failure modes with condition



Condition -> object
termites - 3 years
decay - 10 years
weathering = 50 years

ConditionLoss -> Failure Mode


####******************************************

Comp sim_timeline

    sim every timeline

FM sim_timeline

    sim time
    sim state_initiation
    sim indicators
        sim condition loss
            pass pf_interval
        sim symptoms

    sim state_failure
        # sim safety factor
    sim time tasks
    sim condition tasks


Cond sim?





Scenarios
    # Component
        # Failure Mode


    # Component
        # Failure Mode
        # Condition

    # Component
        # Failure Mode
        # Failure Mode
        # Condition
        # Safety Factor



Indicators methods
    # Condition has its own timeline

    # timeline
        condition_ 


Timelines
    # Condition
    # Failure Mode





Indicator -> Overload for each asset class
    
    # check failure
    
    # Condition
        # get condition (all, one)
        # set condition
    # Symptom
        # 



Transformer

    # Check failure
        # Bearing noise (limit)
        # oil reading (limit)

    # Reset condition



# Comp

    # For every Fm

        # initiation
        # condition

    # indicators

    # for every FM:
        # time tasks
        # failure
        # condition



Failure Mode    
    # initiation
    # condition -> indicators
    # time tasks
    # states (detection, failure)
    # condition




# Sim timeline
     
    # initialise timeline

    # Check for next task

    # Execute next task




Condition

    # Get accumulation
        # Add t_acumumlation from each failure mode that affects it

    # Get perfect



    # Get the profile (perfect, failed, pf_interval)

    # Subtract accumulated condition

    # Subtract accumulated time

    # Add free



wall thickness


    starts
        termites 0
        decay 20

    termites    0   0   10  20  30
    decay       20  30  40  50  60


    

# Get_condition_loss_timeline (cause = None)

    if is None:
        add them all up
    else


# Get_condition_timeline


Indicator (conditions) safety factor needs all the conditions

    get_condition_timeline (20, 30, 50  70   90) ---> current condition/loss caused by all failure modes




