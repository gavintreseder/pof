    @property
    def dists(self):
        """
        Usage:

        A single distribution can be added to the dists dictionary

            >>> fm.dists = Distribution(name='untreated')
            >>> fm.dists
            {'untreated': <pof.distribution.Distribution object at 0x...

            >>> fm.dists = dict(name='dist_from_dict', alpha=50, beta = 10, gamma=1)
            >>> fm.dists
            {'dist_from_dict': <pof.distribution.Distribution object at 0x..

        An iterator of distributions can be added to the dists dictionary

            >>> fm.dists = dict('fm_name' = Distribution())
            >>> fm.dists
            {'fm_name': <pof.distribution.Distribution object at 0x...

            >>> fm.dists = dict('first_dist' = dict(name='first_dist', alpha=50, beta=10, gamma=1))
            {'first_dist': <pof.distribution.Distribution object at 0x...

        """
        return self._dists

    @dists.setter
    def dists(self, value):

        # TODO maybe just update init each time anyway?
        untreated = copy.copy(getattr(getattr(self, "_dists", None), "untreated", None))

        self._set_container_attr("_dists", Distribution, value)

        # Check if 'untreated' was updated and if so, call init dist
        if untreated != self.dists.get("untreated", None):
            self.set_init_dist()







    # TODO overide __setattr__ to make it imporve dypte.load

    def _set_container_attr2(self, attr, d_type, value):

        # Create an empty dictionary if it doesn't exist #Dodgy fix because @property error
        if getattr(self, attr, None) is None:
            setattr(self, attr, dict())

        if value is None:
            setattr(self, attr, dict())

        # Make it an iterable if it isn't one
        if not isinstance(value, Iterable):
            value = dict(unknown=value)

        for key, val in value.items():
            # Add the value to the dictionary if it is an object of that type
            if isinstance(val, d_type):
                getattr(self, attr)[val.name] = val

            # Update the value if it akready exists
            elif key in getattr(self, attr):
                getattr(self, attr)[key].update_from_dict(val)

            # Trye to create an object from the input
            else:
                getattr(self, attr)[val["name"]] = d_type.load(val)